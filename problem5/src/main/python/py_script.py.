from pyspark import SparkContext,SparkConf



if __name__ == '__main__':
	# Create spark configuration and context	
	conf = SparkConf().setAppName("BaseBall Stastistics").setMaster("local[*]")
	sc = SparkContext(conf = conf)

	# read input files
	f1 = sc.textFile("flightdelays/fldata1.csv")
	f2 = sc.textFile("flightdelays/fldata2.csv")
	f3 = sc.textFile("flightdelays/fldata3.csv")

	# extract header for later filtering.
	header = f1.first()
	
	# TASK 02 : Clean data 

	'''
		extracted records :Year, Month, DayofMonth, DepTime, UniqueCarrier, 
				   FlightNum, ArrDelay, Origin and Dest
	'''

	f1m = f1.filter(lambda x : (x != '' and x!=header)) \
	.map(lambda x : x.split(",")) \
	.filter(lambda x : x[4] != 'NA') \
	.map(lambda x : ""+x[0]+","+x[1]+","+x[2]+","+x[4]+","+x[8]+","+x[9]+","+x[14]+","+x[16]+","+x[17]+"") 

	f2m = f2.filter(lambda x : (x != '' and x!=header)) \
	.map(lambda x : x.split(",")) \
	.filter(lambda x : x[4] != 'NA') \
	.map(lambda x : ""+x[0]+","+x[1]+","+x[2]+","+x[4]+","+x[8]+","+x[9]+","+x[14]+","+x[16]+","+x[17]+"") 

	f3m = f3.filter(lambda x : (x != '' and x!=header)) \
	.map(lambda x : x.split(",")) \
	.filter(lambda x : x[4] != 'NA') \
	.map(lambda x : ""+x[0]+","+x[1]+","+x[2]+","+x[4]+","+x[8]+","+x[9]+","+x[14]+","+x[16]+","+x[17]+"") 

	# Save data
	
	f1m.saveAsTextFile("flightdelays_clean/fldata1.csv")
	f2m.saveAsTextFile("flightdelays_clean/fldata2.csv")
        f3m.saveAsTextFile("flightdelays_clean/fldata3.csv")

	'''
	clean_final = (f1m.union(f2m)).union(f3m)
	clean_final.coalesce(1).saveAsTextFile("flightdelays_clean")
	'''

	# TASK 03 : calculates the number of rows of cleaned data
	f1_cnt = f1m.count()
	f2_cnt = f2m.count()
	f3_cnt = f3m.count()

	totalRows = f1_cnt + f2_cnt + f3_cnt
	temp = ['Total number of cleaned records are :',str(totalRows)]
	sc.parallelize(temp).saveAsTextFile("cleaned_total")

	# Calculating flights arriving late on denver airport
	den1 = f1m.map(lambda x : x.split(",")).filter( lambda x : x[8] == "DEN").map(lambda x : ",".join(x))
	den2 = f2m.map(lambda x : x.split(",")).filter( lambda x : x[8] == "DEN").map(lambda x : ",".join(x))
	den3 = f1m.map(lambda x : x.split(",")).filter( lambda x : x[8] == "DEN").map(lambda x : ",".join(x))
	den = (den1.union(den2)).union(den3)
	den.coalesce(1).saveAsTextFile("denver_total")

	den_60 = den.map(lambda x : x.split(",")) \
	.filter(lambda x : (x[6] != '' and x[6] != 'NA')) \
	.filter(lambda x : (float(x[6]) > 59)) \
	.map(lambda x : ",".join(x))

	den_60.coalesce(1).saveAsTextFile("denver_late")
	 
	sc.stop()

